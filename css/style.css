/* By placing the :root on the very top of CSS. we are definging the the scope of the variable to be available for use to all elements (Global) */

/* CSS variable is defined by -- to the front of the variable name. this is in contrast with Sass, where you use the $ sign to define the varialbes. */

/* to pass the value onto the property you need to use var() */
:root {
  /* colors */
  --primary-color: lightgray;
  --secondary-color: #a0b7a8;
  --dark-grey: #2b2b2b;
  --linksColor: #000;
  --visitedLinks: #67056e;
  --hoverAndFocus: rgb(97, 76, 233);
  --activeLink: #016d29;
  --sunColor0: #edc655;
  --sunColor50: #fcffad;
  --sunColor100: #f76414;

  /* Font-sizes */
  --HeadingFontSizeH1: 30px;
  --HeadingFontSizeH2: 24px;
  --HeadingFontSizeH3: 18px;
  --fontWeight: 700;
}

* {
  box-sizing: border-box;
}

/* Typography */

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  line-height: 1.6;
}

.logo {
  width: 200px;
  height: 70px;
}

.page-header {
  display: flex;
  width: 100%;
  padding: 20px;
}

.page-header_item {
  flex: 0 1 200px;
}

.page-header_item:last-child {
  flex-grow: 1;
  text-align: right;
}

.navigation-list {
  list-style-type: none;
}

.navigation-list li {
  display: inline-block;
  margin-left: 15px;
}

h1 {
  font-size: var(--HeadingFontSizeH1);
  font-weight: var(--fontWeight);
}

h2 {
  font-size: var(--HeadingFontSizeH2);
  font-weight: var(--fontWeight);
}

h3 {
  font-size: var(--HeadingFontSizeH3);
  font-weight: var(--fontWeight);
}

a {
  color: var(--linksColor);
}

a:visited {
  color: var(--visitedLinks);
}

/* The a:hover must come after the a:visited in CSS definition in order to be effective. like */
a:hover,
a:focus {
  text-decoration: none;
  color: var(--hoverAndFocus);
  cursor: pointer;
  opacity: 0.9;
}

/* the active must come after a:hover in CSS definition in order to work. */
a:active {
  color: var(--activeLink);
}

.navigation-list__item--active {
  text-decoration: none;
}

.profile_portrait {
  float: left;
  width: 250px;
  margin-right: 40px;
  height: auto;
  border-radius: 50%;
}

.page-footer {
  clear: both;
  display: flex;
  flex-direction: column;
  text-align: center;
}

.profile {
  max-width: 700px;
  margin: 0 auto;
}

/* Responsive design */
.project-list {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-gap: 20px;
}

.project__item {
  background-color: var(--primary-color);
  padding: 10px;
}

/* I used ChatGPT to create this code, then i modified it to suit my code. */
.project__item:hover {
  background-color: var(--secondary-color);
  transform: scale(1.1) rotate(5deg);
}

/* Media queries */

@media all and (max-width: 200px) {
  .project-list {
    grid-template-columns: 1fr;
  }
}

@media all and (min-width: 200px) and (max-width: 500px) {
  .project-list {
    grid-template-columns: 1fr 1fr;
  }
}

/* Adding intermediary step where the screen go from a 2-column grid to a 4 column grid when the screen width
 is greater than 500px but less than 750px */
@media all and (min-width: 500px) and (max-width: 750px) {
  .project-list {
    grid-template-columns: 1fr 1fr 1fr 1fr;
  }
}

@media all and (max-width: 750px) {
  .project-list {
    grid-gap: 10px;
  }

  .project-list:last-child {
    grid-column: auto / auto;
    grid-row: auto / auto;
  }

  h1 {
    font-size: 22px;
  }
}

@keyframes color-change {
  0% {
    fill: var(--sunColor0);
  }

  50% {
    fill: var(--sunColor50);
  }

  100% {
    fill: var(--sunColor100);
  }
}

.sun {
  animation: 4s color-change infinite alternate linear;
}

@keyframes cloud-move {
  from {
    transform: translate(0, 50px);
  }

  to {
    transform: translate(200px, 50px);
  }
}

.cloud-front {
  animation: 30s cloud-move infinite alternate linear;
}

@keyframes cloud-move-reverse {
  from {
    transform: translate(446, 48px);
  }

  to {
    transform: translate(100px, 48px);
  }
}

.cloud-back {
  animation: 30s cloud-move-reverse infinite alternate linear;
}

@keyframes background-color {
  from {
    background-color: var(--primary-color);
  }

  to {
    background-color: var(--secondary-color);
  }
}

.section {
  animation-duration: 3s;
  animation-name: background-color;
  animation-iteration-count: infinite;
}
